# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1

orbs:
  aws-s3: circleci/aws-s3@1.0.11

jobs:
  build:
    docker:
      - image: circleci/node:12.16.1

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: yarn install

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

      - run: yarn lint

      - run: yarn test

      - run: yarn build

      - persist_to_workspace:
          root: .
          paths:
            - build

  acceptance:
    docker:
      - image: circleci/python:2.7

    working_directory: ~/repo

    steps:
      - checkout

      - run: yarn install

      - setup_remote_docker:
          remote: true
          reusable: true
          docker_layer_caching: true
          version: '18.09.3'

      - run: cd acceptance; yarn build

      - run: cd acceptance; yarn test

  deploy-staging:
    docker:
      - image: circleci/python:2.7

    steps:
      - attach_workspace:
          at: .

      - aws-s3/sync:
          from: build
          to: 's3://staging-jupiter-assets'
          arguments: '--acl public-read'
          overwrite: true

  deploy-prod:
    docker:
      - image: circleci/python:2.7

    steps:
      - attach_workspace:
          at: .

      - aws-s3/sync:
          from: build
          to: 's3://prod-jupiter-assets'
          arguments: '--acl public-read'
          overwrite: true

master_only: &master_only
  filters:
    branches:
      only:
        - master

not_master: &not_master
  filters:
    branches:
      ignore:
        - master

workflows:
  version: 2.1
  build_and_deploy:
    jobs:
      # Triggered on all branches
      - build

      - acceptance:
          requires:
            - build

      # All branches must go to staging before going to master - enforced by git branch protection.
      - staging-deploy-ask:
          <<: *not_master
          type: approval
          requires:
            - acceptance
      - deploy-staging:
          <<: *not_master
          requires:
            - staging-deploy-ask

      # Because deploy to staging has already happened before merge to master, we can go to prod - enforced by git branch protection.
      - deploy-prod:
          <<: *master_only
          requires:
            - build
